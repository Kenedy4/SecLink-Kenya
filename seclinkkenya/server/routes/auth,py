
from flask import Flask, request, session, jsonify, 
from flask_restful import Resource
class Signup(Resource):
    def post(self):
        data = request.get_json()
        # username = data.get('username')
        email = data.get('email')
        password = data.get('password')
        

        if not email or not password :
            return jsonify({'error': 'email and password are required.'}), 422

        # user = Teacher(email=email)
        hash_password = bcrypt.generate_password_hash(password)  # Using hybrid property for password hashing
        # user.password =  hash_password  # Using hybrid property for password hashing
        user = User(email=email, password=hash_password)

        try:
            db.session.add(user)
            db.session.commit()
        except IntegrityError:
            db.session.rollback()
            return {'error': 'User already exists.'}, 422

        session['user_id'] = user.id
        return jsonify({'id': user.id, 'email': user.email}), 201 #'username': user.name,

class Login(Resource):
    def post(self):
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')

        user = User.query.filter_by(email=email).first()
        if user and user.check_password(password):
            session['user_id'] = user.id
            return {'id': user.id, 'email': user.email}, 200 #'username': user.name,

        return jsonify({'error': 'Invalid credentials'}), 401

class CheckSession(Resource):
    @login_required
    def get(self):
        user_id = session.get('user_id')
        user = User.query.get(user_id)
        if user:
            return {'id': user.id,  'email': user.email}, 200 #'username': user.name,
        return jsonify({'error': 'User not found'}), 404
    
class Logout(Resource):
    def delete(self):
        if session.get('user_id') is None:
            return {'error': 'Unauthorized'}, 401  # Return 401 when no active session
        session.pop('user_id', None)
        return {}, 204