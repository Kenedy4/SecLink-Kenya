
from flask import Flask, request, session, jsonify 
from flask_restful import Resource
from models import Teacher, Parent, User, db
from seclinkkenya.server.app import login_required

class Signup(Resource):
    def post(self):
        data = request.get_json()
        if data['role'] == 'teacher':
            new_user = Teacher(
                username=data['username'],
                password=data['password']
            )
            new_user.set_password(data['password'])
            db.session.add(new_user)
            db.session.commit()
            return {'message': 'Teacher registered successfully.'}, 201
            
        elif data['role'] == 'parent':
            new_user = Parent(
                username=data['username'],
                password=data['password']
            )
            new_user.set_password(data['password'])
            db.session.add(new_user)
            db.session.commit()
            return {'message': 'Parent registered successfully.'}, 201

        return {'message': 'Invalid role.'}, 400
    
class Login(Resource):
    def post(self):
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')

        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            session['user_id'] = user.id
            session['role'] = user.role  # Store user role in session
            return {'id': user.id, 'username': user.username, 'role': user.role}, 200  # Include role in response

        return jsonify({'error': 'Invalid credentials'}), 401

class CheckSession(Resource):
    @login_required
    def get(self):
        user_id = session.get('user_id')
        user = User.query.get(user_id)
        if user:
            return {'id': user.id, 'username': user.username, 'role': user.role}, 200  # Include role in response
        return jsonify({'error': 'User not found'}), 404
    
class Logout(Resource):
    def delete(self):
        if session.get('user_id') is None:
            return {'error': 'Unauthorized'}, 401  # Return 401 when no active session
        session.pop('user_id', None)
        session.pop('role', None)  # Remove the role from session
        return {}, 204
